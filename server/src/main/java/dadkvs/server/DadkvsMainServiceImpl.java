package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.*;
import dadkvs.server.DadkvsPaxosServiceImpl;

import dadkvs.server.entities.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

    DadkvsServerState server_state;
    int               timestamp;
	/** Broadcast control variables */
	private final int   n_servers = 5;
	private ManagedChannel[] channels;
	private DadkvsPaxosServiceGrpc.DadkvsPaxosServiceStub[] async_stubs;
    
    public DadkvsMainServiceImpl(DadkvsServerState state) {
        this.server_state = state;
		this.timestamp = 0;
		initiate();
    }

	public void initiate() {
		this.channels = new ManagedChannel[n_servers];
		this.async_stubs = new DadkvsPaxosServiceGrpc.DadkvsPaxosServiceStub[n_servers];
		String localhost = "localhost";
		for(int i = 0; i < n_servers; i++) {
			int port = this.server_state.base_port + i;
			this.channels[i] = ManagedChannelBuilder.forAddress(localhost, port).usePlaintext().build();
			this.async_stubs[i] = DadkvsPaxosServiceGrpc.newStub(this.channels[i]);
		}

	}

    @Override
    public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
		// for debug purposes
		System.out.println("Receiving read request:" + request);

		if (this.server_state.i_am_leader)
			this.server_state.sync_service.sendReqOrder(request.getReqid());

		// Convert the request to the internal format
		ReadRequest readRequest = new ReadRequest(request.getReqid(), request.getKey());

		// Process the request
		VersionedValue vv = this.server_state.ordered_request_processor.read(readRequest);

		DadkvsMain.ReadReply response =DadkvsMain.ReadReply.newBuilder()
			.setReqid(request.getReqid()).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
    }

    @Override
    public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
		// for debug purposes
		System.out.println("Receiving commit request:" + request);
		if (this.server_state.i_am_leader){
			doPaxos(request);
		}else{
			System.out.println("I'm not the leader, cannot process requests");
		}
			this.server_state.sync_service.sendReqOrder(request.getReqid());

		// Convert the request to the internal format
		CommitRequest commitRequest = new CommitRequest(
					request.getReqid(), request.getKey1(), request.getVersion1(),
					request.getKey2(), request.getVersion2(), request.getWritekey(),
					request.getWriteval()
					);

		boolean result = this.server_state.ordered_request_processor.committx(commitRequest);

		// for debug purposes
		System.out.println("Result is ready for request with reqid " + request.getReqid());

		DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
			.setReqid(request.getReqid()).setAck(result).build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
    }

	public void doPaxos(DadkvsMain.CommitRequest request){
		//Incrementing the local timestamp
		int phase1Timestamp = this.timestamp++;

		//TODO: Which is the key that gets to be written on
		//TODO: What do we do about configs at this point?
		if(this.server_state.my_id!= 0){
			DadkvsPaxos.PhaseOneRequest phaseOneRequest = DadkvsPaxos.PhaseOneRequest.newBuilder()
					.setPhase1Config(0)
					.setPhase1Index(request.getKey1())
					.setPhase1Timestamp(phase1Timestamp)
					.build();

			//Preparing to accept the phase one replies
			List<DadkvsPaxos.PhaseOneReply> phaseOneReplies = new ArrayList<>();
			//this is like a synchronized for Integers
			AtomicInteger replicas_accepts = new AtomicInteger(0);
			AtomicInteger replicas_reject = new AtomicInteger(0);
			int majority = (n_servers / 2) + 1;


			//Sending the phase one requests
			for(DadkvsPaxosServiceGrpc.DadkvsPaxosServiceStub stub: this.async_stubs){
				// TODO: Should we just use an empty StreamObserver?
				stub.phaseone(phaseOneRequest, new StreamObserver<DadkvsPaxos.PhaseOneReply>() {
					@Override
					public void onNext(DadkvsPaxos.PhaseOneReply phaseOneReply) {
						if(phaseOneReply.getPhase1Accepted()) {
							replicas_accepts.incrementAndGet();
							phaseOneReplies.add(phaseOneReply);
						}
					}
					@Override
					public void onError(Throwable throwable) {}
					@Override
					public void onCompleted() {}
				});
			}

			//Check for majority
			if(replicas_accepts >= majority){
				//TODO : Phase Two
			}

		}

	}
}
