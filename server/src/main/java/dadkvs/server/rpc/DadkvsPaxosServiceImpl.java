
package dadkvs.server.rpc;

/* these imported classes are generated by the contract */
import dadkvs.*;

import dadkvs.server.ServerState;
import dadkvs.server.paxos.messages.*;

import io.grpc.stub.StreamObserver;

public class DadkvsPaxosServiceImpl extends DadkvsPaxosServiceGrpc.DadkvsPaxosServiceImplBase {


    ServerState server_state;

    public DadkvsPaxosServiceImpl(ServerState state) {
        this.server_state = state;
    }

    @Override
    public void phaseone(DadkvsPaxos.PhaseOneRequest request, StreamObserver<DadkvsPaxos.PhaseOneReply> responseObserver) {
	    // for debug purposes
	    System.out.println("Receive phase1 request: " + request);

        // Extract details from the PhaseOneRequest
        int phase1config = request.getPhase1Config(); //for next steps of the project
        int phase1index = request.getPhase1Index();
        int phase1timestamp = request.getPhase1Timestamp();

        PrepareMsg prepareMsg = new PrepareMsg(phase1index, phase1timestamp, phase1config);

        PromiseMsg promiseMsg = server_state.acceptor.prepare(prepareMsg);

        DadkvsPaxos.PhaseOneReply reply = DadkvsPaxos.PhaseOneReply.newBuilder()
                                                    .setPhase1Config(promiseMsg.configNumber)
                                                    .setPhase1Index(promiseMsg.consensusNumber)
                                                    .setPhase1Timestamp(promiseMsg.prevAcceptedRoundNumber)
                                                    .setPhase1Accepted(promiseMsg.accepted)
                                                    .setPhase1Value(promiseMsg.prevAcceptedValue)
                                                    .build();

        responseObserver.onNext(reply);
        responseObserver.onCompleted();

    }

    @Override
    public void phasetwo(DadkvsPaxos.PhaseTwoRequest request, StreamObserver<DadkvsPaxos.PhaseTwoReply> responseObserver) {
	    // for debug purposes
	    System.out.println ("Receive phase two request: " + request);

        //Variables regarding the phaseTwoRequest
        int phase2config = request.getPhase2Config();
        int phase2index = request.getPhase2Index();
        int phase2value = request.getPhase2Value();
        int phase2timestamp = request.getPhase2Timestamp();

        AcceptMsg acceptMsg = new AcceptMsg(phase2timestamp, phase2index, phase2config, phase2value);

        AcceptedMsg acceptedMsg = server_state.acceptor.accept(acceptMsg);

        DadkvsPaxos.PhaseTwoReply reply = DadkvsPaxos.PhaseTwoReply.newBuilder()
                                                    .setPhase2Accepted(acceptedMsg.accepted)
                                                    .setPhase2Config(acceptedMsg.configNumber)
                                                    .setPhase2Index(acceptedMsg.consensusNumber)
                                                    .build();

        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }


    @Override
    public void learn(DadkvsPaxos.LearnRequest request, StreamObserver<DadkvsPaxos.LearnReply> responseObserver) {
        // for debug purposes
        System.out.println("Receive learn request: " + request);

        int learnConfig = request.getLearnconfig();  
        int learnIndex = request.getLearnindex();
        int learnTimestamp = request.getLearntimestamp();
        int learnValue = request.getLearnvalue();

        LearnMsg learnMsg = new LearnMsg(learnTimestamp, learnIndex, learnConfig, learnValue);

        LearnedMsg learnedMsg = server_state.learner.learn(learnMsg);

        DadkvsPaxos.LearnReply reply = DadkvsPaxos.LearnReply.newBuilder()
                                                .setLearnaccepted(learnedMsg.accepted)
                                                .setLearnconfig(learnMsg.configNumber)
                                                .setLearnindex(learnMsg.consensusNumber)
                                                .build();


        System.out.println("Learned value for index " + learnIndex + ": " + learnValue);

        responseObserver.onNext(reply);
        responseObserver.onCompleted();
        
    }

    @Override
    public void newBallot(DadkvsPaxos.NewBallotRequest request, StreamObserver<DadkvsPaxos.NewBallotReply> responseObserver) {
        // for debug purposes
        System.out.println("Receive new ballot request: " + request);

        int ballotNumber = request.getBallotnum();
        int newConfig = request.getNewconfig();
        int prevConfig = request.getOldconfig();

        boolean result = server_state.proposer.newBallot(ballotNumber, newConfig, prevConfig);

        DadkvsPaxos.NewBallotReply reply = DadkvsPaxos.NewBallotReply.newBuilder()
                                                .setAck(result)
                                                .build();

        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }

}
